#!/usr/bin/env node

var Hapi = require('hapi')
var plugin = require('../index')
var good = require('good')
var loggerOptions = require('../lib/logger-options')

var server = new Hapi.Server({})
var port = parseInt(process.env.CORSPROXY_PORT || process.env.PORT || 1337, 10)
var host = (process.env.CORSPROXY_HOST || 'localhost');
var proxy = server.connection({ port: port, labels: ['proxy'], host: host})

server.register(require('inert'), function () {})
server.register(require('h2o2'), function () {})

// cors plugin
server.register(plugin, {
  select: ['proxy']
}, function (error) {
  if (error) server.log('error', error)
})

// logger plugin
server.register({
  register: good,
  options: loggerOptions
}, function (error) {
  if (error) server.log('error', error)
})

var proxyServices = process.env.CORSPROXY_SERVICE
proxyServices = proxyServices ? proxyServices.split(" ") : process.argv.slice(2)
console.log("proxyServices: ", proxyServices)

// proxy route
proxy.route({
  method: '*',
  path: '/{host}/{path*}',
  handler: {
    proxy: {
      passThrough: true,
      mapUri: function (request, callback) {
        if (proxyServices.indexOf(request.params.host) > -1) {
          request.host = request.params.host
          request.path = request.path.substr(request.params.host.length + 1)
        } else {
          request.host = proxyServices[0]
        }
        request.headers['host'] = request.host
        var query = request.url.search ? request.url.search : ''
        console.log('proxy to http://' + request.host + request.path)
        callback(null, 'http://' + request.host + request.path + query, request.headers)
      }
    }
  }
})

if (process.env.DEBUG) {
  var testport = port + 1
  var test = server.connection({ port: testport, labels: ['test'], host: host })

  server.register(require('vision'), function (error) {
    if (error) {
      throw error
    }

    server.views({
      engines: { ejs: require('ejs') },
      path: 'public/test'
    })
  })

  test.route({
    method: 'GET',
    path: '/favicon.ico',
    handler: {
      file: 'public/favicon.ico'
    }
  })
  test.route({
    method: 'GET',
    path: '/test.json',
    handler: {
      file: 'public/test/test.json'
    }
  })

  test.route({
    method: 'GET',
    path: '/',
    handler: function (request, reply) {
      reply.view('index', {
        proxyPort: proxy.info.port,
        testPort: test.info.port
      })
    }
  })

  server.log('info', 'Debug server starting at: ' + test.info.uri)
}

server.start(function (error) {
  if (error) server.log('error', error)

  server.log('info', 'CORS Proxy running at: ' + server.info.uri)
})
